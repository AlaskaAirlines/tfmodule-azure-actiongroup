# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

variables:
- group: 'Terraform Module Variables'

steps:
- task: Go@0
  displayName: 'Go get golint'
  inputs:
    command: 'get'
    arguments: '-u golang.org/x/lint/golint'

- task: Go@0
  displayName: 'Go get terratest/modules/terraform'
  inputs:
    command: 'get'
    arguments: 'github.com/gruntwork-io/terratest/modules/terraform'

- task: Go@0
  displayName: 'Go get terratest/modules/azure'
  inputs:
    command: 'get'
    arguments: 'github.com/gruntwork-io/terratest/modules/azure'

- task: Go@0
  displayName: 'Go get azure-sdk-for-go/.../insights'
  inputs:
    command: 'get'
    arguments: 'github.com/Azure/azure-sdk-for-go/profiles/2019-03-01/resources/mgmt/insights'

- task: Go@0
  displayName: 'Go get testify/assert'
  inputs:
    command: 'get'
    arguments: 'github.com/stretchr/testify/assert'

- task: Go@0
  displayName: 'Go get testify/require'
  inputs:
    command: 'get'
    arguments: 'github.com/stretchr/testify/require'

- task: Go@0
  displayName: 'Go test'
  inputs:
    command: 'test'
    arguments: './test'
  env:
    ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
    AZURE_CLIENT_ID: $(ARM_CLIENT_ID)
    AZURE_TENANT_ID: $(ARM_TENANT_ID)

- task: Npm@1
  displayName: 'Npm Install'
  inputs:
    command: 'install'

- task: Bash@3
  displayName: 'Release via semantic-release'
  inputs:
    targetType: 'inline'
    script: 'npx semantic-release'
  env:
    GH_TOKEN: $(GH_TOKEN)